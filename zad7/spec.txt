Definiujemy jedno wyliczenie i trzy C-struktury

    enum Banks {PKO, BGZ, BRE, BPH};
    struct Account {
        Banks   bank;
        int  balance;
};
    struct Person {
        char   name[20];
        Account account;
};
    struct Couple {
        Person  he;
        Person she;
};

W funkcji main tworzymy tablicę par (Couple) z danymi, na przykład, takimi

No   He                She
     Name Bank Balance Name Bank Balance
0    Johny
1    Peter
2    Kevin
3    Kenny
Bank Balance Name PKO 1200 Mary BGZ 1400 Suzy PKO 1600 Katy BPH 200 Lucy
Bank Balance BGZ 1400 BRE -1500 BPH 1500 BRE -201

Zdefiniować funkcję o nagłówku:
const Couple* bestClient(const Couple* cpls, int size, Banks bank);

która zwraca wskaźnik do tej pary (Couple) z tablicy przekazanej jako pierwszy
argument (o wymiarze size), która ma największą sumę oszczędności jego (he) i jej (she),
ale tylko spośród takich par, w których przynajmniej jedno z małżonków ma konto w banku bank.
Jeśli żadna z osób nie ma konta w banku bank, to funkcja zwraca nullptr.
Nie wolno zakładać, że stan konta jest nieujemny; może być dowolnie duży dodatni i
dowolnie duży ujemny. Jeśli dwie lub więcej par spośród tych, które spełniają narzucony warunek
ma takie same, największe, oszczędności, to funkcja zwraca wskaźnik do dowolnej z nich.
Na przykład program o schemacie

#include <iostream>
enum Banks {PKO, BGZ, BRE, BPH};
struct Account {
    Banks   bank;
    int  balance;
};
struct Person {
    char   name[20];
    Account account;
};
struct Couple {
    Person  he;
    Person she;
};
const Couple* bestClient(const Couple* cpls,
// ...
}
else
}
powinien wypisać coś w rodzaju
    Kenny and Lucy: -1

Rozwiązania, w postaci jednego pliku źródłowego zawierającego treść programu,
proszę wrzucać w systemie EDU do katalogu „Foldery zadań / Zadanie_XX”, gdzie ’XX’ jest nu- merem zadania.
Nazwą pliku powinno być nazwisko z dużej litery (bez polskich znaków); rozszerzeniem musi
być ’.cpp’, czyli np. Malinowska.cpp.